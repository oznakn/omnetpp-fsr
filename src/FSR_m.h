//
// Generated file, do not edit! Created by opp_msgtool 6.1 from inet/routing/fsr/FSR.msg.
//

#ifndef __INET_FSR_M_H
#define __INET_FSR_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class FSRControlPacket;
class FSRHelloControlPacket;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/common/packet/Packet_m.h" // import inet.common.packet.Packet

#include "inet/networklayer/common/L3Address_m.h" // import inet.networklayer.common.L3Address


namespace inet {

/**
 * Enum generated from <tt>inet/routing/fsr/FSR.msg:9</tt> by opp_msgtool.
 * <pre>
 * enum FSRControlPacketType
 * {
 *     HELLO = 1;
 * }
 * </pre>
 */
enum FSRControlPacketType {
    HELLO = 1
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FSRControlPacketType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FSRControlPacketType& e) { int n; b->unpack(n); e = static_cast<FSRControlPacketType>(n); }

/**
 * Class generated from <tt>inet/routing/fsr/FSR.msg:14</tt> by opp_msgtool.
 * <pre>
 * class FSRControlPacket extends FieldsChunk
 * {
 *     FSRControlPacketType packetType = static_cast<FSRControlPacketType>(-1);
 * }
 * </pre>
 */
class INET_API FSRControlPacket : public ::inet::FieldsChunk
{
  protected:
    FSRControlPacketType packetType = static_cast<FSRControlPacketType>(-1);

  private:
    void copy(const FSRControlPacket& other);

  protected:
    bool operator==(const FSRControlPacket&) = delete;

  public:
    FSRControlPacket();
    FSRControlPacket(const FSRControlPacket& other);
    virtual ~FSRControlPacket();
    FSRControlPacket& operator=(const FSRControlPacket& other);
    virtual FSRControlPacket *dup() const override {return new FSRControlPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual FSRControlPacketType getPacketType() const;
    virtual void setPacketType(FSRControlPacketType packetType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FSRControlPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FSRControlPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/routing/fsr/FSR.msg:19</tt> by opp_msgtool.
 * <pre>
 * class FSRHelloControlPacket extends FSRControlPacket
 * {
 * }
 * </pre>
 */
class INET_API FSRHelloControlPacket : public ::inet::FSRControlPacket
{
  protected:

  private:
    void copy(const FSRHelloControlPacket& other);

  protected:
    bool operator==(const FSRHelloControlPacket&) = delete;

  public:
    FSRHelloControlPacket();
    FSRHelloControlPacket(const FSRHelloControlPacket& other);
    virtual ~FSRHelloControlPacket();
    FSRHelloControlPacket& operator=(const FSRHelloControlPacket& other);
    virtual FSRHelloControlPacket *dup() const override {return new FSRHelloControlPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FSRHelloControlPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FSRHelloControlPacket& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::FSRControlPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::FSRControlPacket*>(ptr.get<cObject>()); }
template<> inline inet::FSRHelloControlPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::FSRHelloControlPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_FSR_M_H

